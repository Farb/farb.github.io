<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Git on Farb的博客</title><link>https://farb.github.io/tags/git/</link><description>Recent content in Git on Farb的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Fri, 26 Apr 2024 00:22:48 +0800</lastBuildDate><atom:link href="https://farb.github.io/tags/git/index.xml" rel="self" type="application/rss+xml"/><item><title>Git rebase 命令行操作</title><link>https://farb.github.io/p/git_rebase/</link><pubDate>Thu, 25 Apr 2024 00:00:00 +0000</pubDate><guid>https://farb.github.io/p/git_rebase/</guid><description>&lt;h2 id="1-git-rebase-和-git-merge">1. Git rebase 和 Git merge
&lt;/h2>&lt;p>git merge相比git rebase使用更简单，网上对于这两种git工作流的看法也是两个流派。
有人喜欢merge , 有人喜欢rebase。聪明的人不会做偏执狂，团队中让用哪种，咱就用那种就对了，都了解一下没啥坏处。&lt;/p>
&lt;p>在宏观上，git rebase生成的线条和节点更简单清晰，git merge因为会自动合并，当团队成员较多时，产生的线条和节点不太清晰。
微观上，git rebase会创建提交的副本让提交历史更加线性化，git merge会创建自动合并的提交。&lt;/p>
&lt;p>点击下面的链接详细了解两种工作流。&lt;/p>
&lt;p>&lt;a class="link" href="https://www.cnblogs.com/FraserYu/p/11192840.html" target="_blank" rel="noopener"
>https://www.cnblogs.com/FraserYu/p/11192840.html&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://zhuanlan.zhihu.com/p/686538265" target="_blank" rel="noopener"
>https://zhuanlan.zhihu.com/p/686538265&lt;/a>&lt;/p>
&lt;p>这里推荐一个动画学习git的网站：https://learngitbranching.js.org/?locale=zh_CN&lt;/p>
&lt;h2 id="2-git-rebase-命令行">2. Git rebase 命令行
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">git remote -v &lt;span class="c1"># 查看远程仓库，如果没有origin仓库需要加一下&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git remote add upstream remoteUrl &lt;span class="c1"># 将远程仓库加到上游&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git remote -v &lt;span class="c1"># 再次查看远程仓库&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git branch -r &lt;span class="c1"># 查看远程仓库的分支&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 以下几个命令需要经常使用&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git remote update upstream &lt;span class="c1"># 更新上游仓库origin代码&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git rebase upstream/master &lt;span class="c1"># rebase上游仓库master分支的代码到当前分支&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 如果有冲突，需要解决，解决之后git rebase --continue ,然后再推送&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 必须强制推送，因为本地合并的代码已经是确定要保留的代码，如果没有强制推送，则会提示先pull，如果真的pull的话，会导致代码混乱&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git push -f
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item></channel></rss>